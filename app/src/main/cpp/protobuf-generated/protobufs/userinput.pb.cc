// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufs/userinput.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobufs/userinput.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ClientBuffers {

void protobuf_ShutdownFile_protobufs_2fuserinput_2eproto() {
  UserMessage_default_instance_.Shutdown();
  Instruction_default_instance_.Shutdown();
  Keystroke_default_instance_.Shutdown();
}

void protobuf_InitDefaults_protobufs_2fuserinput_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  UserMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Instruction_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Keystroke_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ClientBuffers::Instruction::internal_default_instance(),
    2, 11, false, false,
    ::ClientBuffers::Keystroke::internal_default_instance());
  UserMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  Instruction_default_instance_.get_mutable()->InitAsDefaultInstance();
  Keystroke_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_protobufs_2fuserinput_2eproto_once_);
void protobuf_InitDefaults_protobufs_2fuserinput_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_protobufs_2fuserinput_2eproto_once_,
                 &protobuf_InitDefaults_protobufs_2fuserinput_2eproto_impl);
}
void protobuf_AddDesc_protobufs_2fuserinput_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobufs_2fuserinput_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protobufs_2fuserinput_2eproto_once_);
void protobuf_AddDesc_protobufs_2fuserinput_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protobufs_2fuserinput_2eproto_once_,
                 &protobuf_AddDesc_protobufs_2fuserinput_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobufs_2fuserinput_2eproto {
  StaticDescriptorInitializer_protobufs_2fuserinput_2eproto() {
    protobuf_AddDesc_protobufs_2fuserinput_2eproto();
  }
} static_descriptor_initializer_protobufs_2fuserinput_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForUserMessage(
    UserMessage* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMessage::kInstructionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMessage::UserMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.UserMessage)
}

void UserMessage::InitAsDefaultInstance() {
}

UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.UserMessage)
}

void UserMessage::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:ClientBuffers.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserMessage& UserMessage::default_instance() {
  protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserMessage> UserMessage_default_instance_;

UserMessage* UserMessage::New(::google::protobuf::Arena* arena) const {
  UserMessage* n = new UserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBuffers.UserMessage)
  instruction_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForUserMessage, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ClientBuffers.UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClientBuffers.Instruction instruction = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_instruction;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.UserMessage)
  return false;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.UserMessage)
  // repeated .ClientBuffers.Instruction instruction = 1;
  for (unsigned int i = 0, n = this->instruction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->instruction(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ClientBuffers.UserMessage)
}

size_t UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBuffers.UserMessage)
  size_t total_size = 0;

  // repeated .ClientBuffers.Instruction instruction = 1;
  {
    unsigned int count = this->instruction_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instruction(i));
    }
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserMessage*>(&from));
}

void UserMessage::MergeFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBuffers.UserMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserMessage::UnsafeMergeFrom(const UserMessage& from) {
  GOOGLE_DCHECK(&from != this);
  instruction_.MergeFrom(from.instruction_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void UserMessage::CopyFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBuffers.UserMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->instruction())) return false;
  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserMessage::InternalSwap(UserMessage* other) {
  instruction_.UnsafeArenaSwap(&other->instruction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserMessage::GetTypeName() const {
  return "ClientBuffers.UserMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserMessage

// repeated .ClientBuffers.Instruction instruction = 1;
int UserMessage::instruction_size() const {
  return instruction_.size();
}
void UserMessage::clear_instruction() {
  instruction_.Clear();
}
const ::ClientBuffers::Instruction& UserMessage::instruction(int index) const {
  // @@protoc_insertion_point(field_get:ClientBuffers.UserMessage.instruction)
  return instruction_.Get(index);
}
::ClientBuffers::Instruction* UserMessage::mutable_instruction(int index) {
  // @@protoc_insertion_point(field_mutable:ClientBuffers.UserMessage.instruction)
  return instruction_.Mutable(index);
}
::ClientBuffers::Instruction* UserMessage::add_instruction() {
  // @@protoc_insertion_point(field_add:ClientBuffers.UserMessage.instruction)
  return instruction_.Add();
}
::google::protobuf::RepeatedPtrField< ::ClientBuffers::Instruction >*
UserMessage::mutable_instruction() {
  // @@protoc_insertion_point(field_mutable_list:ClientBuffers.UserMessage.instruction)
  return &instruction_;
}
const ::google::protobuf::RepeatedPtrField< ::ClientBuffers::Instruction >&
UserMessage::instruction() const {
  // @@protoc_insertion_point(field_list:ClientBuffers.UserMessage.instruction)
  return instruction_;
}

inline const UserMessage* UserMessage::internal_default_instance() {
  return &UserMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInstruction(
    Instruction* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Instruction::Instruction()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.Instruction)
}

void Instruction::InitAsDefaultInstance() {
}

Instruction::Instruction(const Instruction& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.Instruction)
}

void Instruction::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:ClientBuffers.Instruction)
  SharedDtor();
}

void Instruction::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Instruction& Instruction::default_instance() {
  protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Instruction> Instruction_default_instance_;

Instruction* Instruction::New(::google::protobuf::Arena* arena) const {
  Instruction* n = new Instruction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBuffers.Instruction)
  _extensions_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForInstruction, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ClientBuffers.Instruction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((16u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                  &unknown_fields_stream));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.Instruction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.Instruction)
  return false;
#undef DO_
}

void Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.Instruction)
  // Extension range [2, 536870912)
  _extensions_.SerializeWithCachedSizes(
      2, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ClientBuffers.Instruction)
}

size_t Instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBuffers.Instruction)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instruction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Instruction*>(&from));
}

void Instruction::MergeFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBuffers.Instruction)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Instruction::UnsafeMergeFrom(const Instruction& from) {
  GOOGLE_DCHECK(&from != this);
  _extensions_.MergeFrom(from._extensions_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Instruction::CopyFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBuffers.Instruction)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Instruction::IsInitialized() const {


  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void Instruction::Swap(Instruction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Instruction::InternalSwap(Instruction* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string Instruction::GetTypeName() const {
  return "ClientBuffers.Instruction";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Instruction

inline const Instruction* Instruction::internal_default_instance() {
  return &Instruction_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForKeystroke(
    Keystroke* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Keystroke::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Keystroke::Keystroke()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.Keystroke)
}

void Keystroke::InitAsDefaultInstance() {
}

Keystroke::Keystroke(const Keystroke& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.Keystroke)
}

void Keystroke::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keys_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Keystroke::~Keystroke() {
  // @@protoc_insertion_point(destructor:ClientBuffers.Keystroke)
  SharedDtor();
}

void Keystroke::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keys_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Keystroke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Keystroke& Keystroke::default_instance() {
  protobuf_InitDefaults_protobufs_2fuserinput_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Keystroke> Keystroke_default_instance_;

Keystroke* Keystroke::New(::google::protobuf::Arena* arena) const {
  Keystroke* n = new Keystroke;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Keystroke::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientBuffers.Keystroke)
  if (has_keys()) {
    keys_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Keystroke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForKeystroke, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ClientBuffers.Keystroke)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.Keystroke)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.Keystroke)
  return false;
#undef DO_
}

void Keystroke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.Keystroke)
  // optional bytes keys = 4;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->keys(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ClientBuffers.Keystroke)
}

size_t Keystroke::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientBuffers.Keystroke)
  size_t total_size = 0;

  // optional bytes keys = 4;
  if (has_keys()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->keys());
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keystroke::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Keystroke*>(&from));
}

void Keystroke::MergeFrom(const Keystroke& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientBuffers.Keystroke)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Keystroke::UnsafeMergeFrom(const Keystroke& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_has_keys();
      keys_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keys_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Keystroke::CopyFrom(const Keystroke& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientBuffers.Keystroke)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Keystroke::IsInitialized() const {

  return true;
}

void Keystroke::Swap(Keystroke* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Keystroke::InternalSwap(Keystroke* other) {
  keys_.Swap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Keystroke::GetTypeName() const {
  return "ClientBuffers.Keystroke";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Keystroke

// optional bytes keys = 4;
bool Keystroke::has_keys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Keystroke::set_has_keys() {
  _has_bits_[0] |= 0x00000001u;
}
void Keystroke::clear_has_keys() {
  _has_bits_[0] &= ~0x00000001u;
}
void Keystroke::clear_keys() {
  keys_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keys();
}
const ::std::string& Keystroke::keys() const {
  // @@protoc_insertion_point(field_get:ClientBuffers.Keystroke.keys)
  return keys_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Keystroke::set_keys(const ::std::string& value) {
  set_has_keys();
  keys_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientBuffers.Keystroke.keys)
}
void Keystroke::set_keys(const char* value) {
  set_has_keys();
  keys_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientBuffers.Keystroke.keys)
}
void Keystroke::set_keys(const void* value, size_t size) {
  set_has_keys();
  keys_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientBuffers.Keystroke.keys)
}
::std::string* Keystroke::mutable_keys() {
  set_has_keys();
  // @@protoc_insertion_point(field_mutable:ClientBuffers.Keystroke.keys)
  return keys_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Keystroke::release_keys() {
  // @@protoc_insertion_point(field_release:ClientBuffers.Keystroke.keys)
  clear_has_keys();
  return keys_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Keystroke::set_allocated_keys(::std::string* keys) {
  if (keys != NULL) {
    set_has_keys();
  } else {
    clear_has_keys();
  }
  keys_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keys);
  // @@protoc_insertion_point(field_set_allocated:ClientBuffers.Keystroke.keys)
}

inline const Keystroke* Keystroke::internal_default_instance() {
  return &Keystroke_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::ClientBuffers::Instruction,
    ::google::protobuf::internal::MessageTypeTraits< ::ClientBuffers::Keystroke >, 11, false >
  keystroke(kKeystrokeFieldNumber, *::ClientBuffers::Keystroke::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientBuffers

// @@protoc_insertion_point(global_scope)
